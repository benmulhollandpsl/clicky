{"version":3,"sources":["components/GridMDC/GridMDC.js","components/PaperMDC/PaperMDC.js","components/CharCard/CharCard.js","components/Score/Score.js","components/Alert/Alert.js","components/NavBar/NavBar.js","components/BottomNavMDC/BottomNavMDC.js","App.js","serviceWorker.js","index.js"],"names":["GridMDC","props","Grid","children","PaperMDC","Paper","CharCard","id","name","image","handlePicked","Score","className","type","score","Alert","style","message","NavBar","AppBar","position","Toolbar","Typography","variant","color","align","BottomNavMDC","BottomNavigation","App","state","picturecards","pickedChars","topScore","alertMessage","event","target","attributes","getNamedItem","value","shufflePicturecards","checkGuess","updateTopScore","setState","shuffleArray","a","j","x","i","length","Math","floor","random","cb","newState","includes","toUpperCase","push","alertWinner","background","marginBottom","container","direction","margin","maxWidth","item","lg","this","justify","md","sm","xs","spacing","map","char","key","marginTop","paddingTop","borderTop","href","rel","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d9f65587.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from '@material-ui/core/Grid';\n\nconst GridMDC = props =>\n    <Grid {...props}>\n        {props.children}\n    </Grid>\n\nexport default GridMDC;","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst PaperMDC = props => (\n    <Paper>\n        {props.children}\n    </Paper>\n)\n\nexport default PaperMDC;","import React from \"react\";\nimport \"./CharCard.css\";\n// import { url } from \"inspector\";\n\nconst CharCard = ({ id, name, image, handlePicked }) => (\n    // <div className={`mdc-layout-grid__cell--span-3--order-${Number(id)}`}>\n    <div>\n        <div\n            className=\"card\"\n            key={id}\n            data-id={id}\n            name={name}\n            style={{ backgroundImage: `url(${image})` }}\n            onClick={handlePicked}\n        >\n        </div>\n    </div>\n)\n\nexport default CharCard;\n","import React from \"react\";\nimport \"./Score.css\";\n\nconst Score = props => (\n    <div className=\"score\">\n        {props.type}: {props.score}\n    </div>\n)\n\nexport default Score;","import React from \"react\";\nimport \"./Alert.css\";\n\nconst Alert = props => (\n    <div className=\"default\" style={props.style}>\n        {props.message ? (\n            <p>{props.message}</p>\n        ) : (\n                <p className=\"default-msg black\">Click an image to begin!</p>\n            )}\n    </div>\n)\n\nexport default Alert;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = props => {\n    return(\n        <div>\n        <AppBar position=\"static\" {...props}>\n            <Toolbar>\n                <Typography variant=\"headline\" color=\"inherit\" align=\"center\">\n                Clicky\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React from \"react\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport \"./BottomNavMDC.css\"\n\nconst BottomNavMDC = props => (\n    <BottomNavigation {...props}>\n        {props.children}\n    </BottomNavigation>\n)\n\nexport default BottomNavMDC;","import React, { Component } from 'react';\nimport GridMDC from \"./components/GridMDC\";\nimport PaperMDC from \"./components/PaperMDC\";\nimport CharCard from \"./components/CharCard\";\nimport Score from \"./components/Score\";\nimport Alert from \"./components/Alert\";\nimport NavBar from \"./components/NavBar\";\nimport BottomNavMDC from \"./components/BottomNavMDC\";\nimport picturecards from \"./picturecards.json\";\n\nclass App extends Component {\n\n  state = {\n    picturecards: picturecards,\n    pickedChars: [],\n    topScore: 0,\n    alertMessage: \"\"\n  }\n\n  handlePicked = event => {\n\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shufflePicturecards()\n    this.checkGuess(name, this.updateTopScore)\n  }\n\n  shufflePicturecards = () => {\n    this.setState(this.state.picturecards = this.shuffleArray(this.state.picturecards))\n    \n  }\n\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedChars.includes(name)) {\n      newState.alertMessage = `YOU ALREADY PICKED \"${name.toUpperCase()}\"!`\n      newState.pickedChars = []\n      this.setState(this.state = newState)\n    } else {\n      newState.pickedChars.push(name)\n      newState.alertMessage = `GOOD CHOICE!`\n      this.setState(this.state = newState)\n    }\n    cb(newState, this.alertWinner)\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedChars.length > newState.topScore) {\n      newState.topScore++\n      this.setState(this.state = newState)\n    }\n    cb(newState)\n  }\n\n  alertWinner = (newState) => {\n    if (newState.pickedChars.length === 12) {\n      newState.alertMessage = \"CHAMPION!\";\n      newState.pickedChars = [];\n      this.setState(this.state = newState)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} />\n\n        <GridMDC container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945 }}>\n\n          <GridMDC item lg={12}>\n            <PaperMDC>\n              {this.state.alertMessage === \"GOOD CHOICE!\" ? (\n                <Alert message={this.state.alertMessage} style={{ color: \"green\" }} />\n              ) : (\n                  <Alert message={this.state.alertMessage} style={{ color: \"red\" }} />\n                )}\n            </PaperMDC>\n          </GridMDC>\n\n          <GridMDC container justify=\"space-between\">\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Score\" score={this.state.pickedChars.length} />\n              </PaperMDC>\n            </GridMDC>\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Top Score\" score={this.state.topScore} />\n              </PaperMDC>\n            </GridMDC>\n\n          </GridMDC>\n\n        </GridMDC>\n\n        <GridMDC container spacing={24} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\n          {this.state.picturecards.map(char => (\n            <GridMDC item lg={3} md={3} sm={4} xs={6}>\n            <CharCard\n              id={char.id}\n              name={char.name}\n              image={char.image}\n              key={char.id}\n              handlePicked={this.handlePicked}\n            />\n            </GridMDC>\n          ))}\n        </GridMDC>\n        <BottomNavMDC style={{ background: \"#313133\", marginTop: \"17.5px\", paddingTop: \"15px\", borderTop: \"2.5px solid slategray\" }}>\n          <a href=\"https://github.com/benmulhollandpsl/clicky\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"link\" alt=\"clicky-github-link\"><i className=\"fa fa-github fa-2x\"></i></a>\n        </BottomNavMDC>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}